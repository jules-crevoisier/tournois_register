// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  createdTournaments Tournament[]
  teams              Team[]

  @@map("users")
}

model Tournament {
  id                  String            @id @default(cuid())
  title               String
  description         String?
  game                String
  playersPerTeam      Int
  maxTeams            Int
  startDate           DateTime
  endDate             DateTime
  registrationDeadline DateTime
  status              TournamentStatus   @default(DRAFT)
  image               String?           // Vercel Blob URL
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  // Relations
  createdById String
  createdBy   User   @relation(fields: [createdById], references: [id])
  teams       Team[]

  @@map("tournaments")
}

model Team {
  id          String     @id @default(cuid())
  teamName    String
  players     Json       // Array of player objects
  registeredAt DateTime  @default(now())
  status      TeamStatus @default(PENDING)

  // Relations
  tournamentId String
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  captainId    String
  captain      User      @relation(fields: [captainId], references: [id])

  @@map("teams")
}

enum UserRole {
  ADMIN
  USER
}

enum TournamentStatus {
  DRAFT
  OPEN
  CLOSED
  ONGOING
  FINISHED
}

enum TeamStatus {
  PENDING
  CONFIRMED
  CANCELLED
}
